abstract class
interface
dependency injection

exception handling
generic
collections and generics

the child class can override a method of immediate base class if....
	a. immediate base class method is declared with "virtual" keyword
	b. immediate base class method is declared with "abstract" keyword
	c. immediate base class method is declared with "override" keyword (that means the immediate base class has another base class where that method is either virtual or abstarct)
	

abstract class is a class having at least one abstract method/property
1. object of an abstract class can't be created
2. abstract class is meant for inheritance, so that its abstract members can be implemented in the child classes
3. if any child class doesn't implement all the abstract members of the immediate base class, then that child class becomes abstract too, and that child class must be declared explicitly with "abstract" keyowrd
4. abstract class can have data members, constructors, other non-abstract methods, non-abstract properties like any concrete class

Example: abstract method, property and class

abstract class Some{
	private int _guid;

	public Some(){}
	public Some(int guid) { _guid = guid; }

	public int Guid { set=> _guid=value; get => _guid; }

	public int Print(){
		return _guid;
	}

	public abstract void Foo();
	public abstract string Name { set; get; }
}

//following is incorrect code
Some some = new Some(123456);
some.Foo();

class Implementation:Some{

	private string? _name;
	public Implementation(){}
	public Implementation(int guid, string? name)
	:base(guid)
	{
		_name = name;
	}

	//implementation of abstract methdo and property
	public override void Foo(){ //code }
	public override string Name
	{
		set=> _name = value;
		get => _name;
	}
}

abstract class PartialImplementation:Some{
	
	private string? _name;

	public PartialImplementation(){}
	public PartialImplementation(int guid, string? name)
	:base(guid)
	{
		_name = name;
	}

	// abstractmethod is not implemented here	
	// public override void Foo(){ //code }

	// implementation of abstract property
	public override string Name
	{
		set=> _name = value;
		get => _name;
	}
}

class Project{
	string _title;
	DateTime _start;
	DateTime _end;
	
	public abstract void FollowSDLC();
}

class UltraSoundProject:Project{
	public ovveride void FollowSDLC(){
		//Agile
	}
}

class DynamicsProject:Project{
	public ovveride void FollowSDLC(){
		//DevOps
	}
}


interface:
	pure abstract class, i.e., only can contain abstract method(s) and/or propety (ies)
	no data member, explicit constructor can be written
	by default the members in interface are public and abstract, hence no need to use any access specifier (public) or modifier ("abstract")
	while implementing the interface members in any child class, no need to use "override" keyword explicitly, since in the interface, that same member is not declared with exlpicit "abstract" keyword
	declared with "interface" keyword
	naming convention: should start with "I" followed by the name of the interface
	if a class implements an interface, but does not implement all the members of the interface, then the class becomes abstract. In this case, the interface member must be explicitly written in the class using "public" and "abstract" keywords. the class must be declared with "abstract" keyword too.
	like abstract class, you can't instantiate an interface

interface IOperations{
	void Add(int x, int y);
	int Result {set; get;}
}

similarities and dis-similiarities between abstract class and interface?
1. abstract class can have abstract methods and properties just like interface
	absract class can have non-abstract members too, which interface can't have
2. abstract class can't be instantiated just like interface, though you can declare variable of both of them to store the reference of any child class
3. abstract class can have explicit static and non-static constructors, data members, methods, properties etc., which interface can't have

etc. etc.

in which situation should you use 
	a. concrete base class with virtual method/property and child class with override method/property
	b. abstract base class with abstract method/property and child class with override method/property
	c. interface with abstract method/property and child class with implemented method/property


Tightly-coupled code:
an instance of one class (BankingService) depends on an instance of another class (BankingOperations). 
	1st party (BankingService): dependent
	2nd party (BankingOperations): dependency factor

If the "dependent" instance creates an instance of the "dependency factor" directly => dependent and dependency factor are tightly coupled

Loosely-coupled:
If the "dependent" instance DOES NOT create an instance of the "dependency factor" directly, rather asks "someone" (who is using dependent instance) to pass reference of the instance of the dependency factor instead, via its base interface/abstract class => dependent and dependency factor are loosely coupled

DI: supplying the instance of dependency factor in an instance of dependent class. its achieved via abstract base class/interface. Use this DI to achieve loose coupling.


Errors:
	a. compile time
	b. run-time error
		runtime pause further execution of the code
		runtime itself creates an instance of corresponding exception class (InvalidCastException, IndexOutOfRangeException, FormatException, NullReferenceException etc.) by passing all necessary information to the instance
		runtime passes (throws) the reference of that class to the application
		are you handling that?

	c. logical error

		Exception:
			SystemException:
				ArithmeticException	
					DivideByZeroException
				ArgumentException
					ArgumentNullException
					ArgumentOutOfRangeException

			ApplicationException:
				If you want to create custom exception class for your application, use this as base class






