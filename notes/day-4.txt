generic
collections and generic collection classes

generic constraints for method, class, interface:
	where type-param-name: constraint-type1, constriant-type2,...

default(T) => returns the defalut value of a type parameter

classes => null
Nullable<T> => null
Numeric => 0
DateTime => 1/1/0001
char => empty char
bool => false

static void Print<T>(T a){
	cw(default(T));
}

Print<int?>(10);

namepace: System
IComparable and IComparable<T>

Collections namespace: System.Collections

collection interfaces
---------------------------------------------------------------
IEnumerable and IEnumerator, ICollection, IList, IComparer 

Collection classes:
------------------------------------
ArrayList, Stack, Queue, HashTable, SortedList, DictionaryEntry

Generic Collections namespace: System.Collections.Generic


generic collection interfaces
---------------------------------------------------------------
IEnumerable<T> and IEnumerator<T>, ICollection<T>, IList<T>, IComparer<T> 

generic collection classes:
------------------------------------
List<T>, Stack<T>, Queue<T>, Dictionary<TKey,TValue>, SortedList<TKey,TValue>, KeyValuePair<TKey,TValue>, HashSet<T>

Object
	=> Type GetType()
	=> virtual string ToString()
	=> virtual bool Equals(object obj)
	=> virtual int GetHashCode()

nth hash code = currentdata and (n-1) th hashcode

IEnumerable<T> => IEnumerator<T> GetEnumerator()
IEnumerable 	 => IEnumerator GetEnumerator()

system
IComparable<T> => int CompareTo(T? other)
IComparable => int CompareTo(obj? other)

system.collections.generic
IComparer<T> => int Compare(T? x, T? y)
system.collections
IComparer => int Compare(obj? x, obj? y)

new features in C#:
1. Implicitly typed local variable and implcitly typed array variable
2. static import
3. Named argument
4. Optional argument with default value
5. auto-implemented/automatic properties
6. Expression bodied member syntax (for properties (get and set), methods, constrctor)
7. automatic property initializer
8. string interpolation
9. null propagator or Null-conditional operators ?. and ?[]
10. Local functions
11. required keyword (is used with auto-properties and data memebrs)
12. Object Intializer and collection Initializer
13. Tuple
14. Record
15. Extension Method 






