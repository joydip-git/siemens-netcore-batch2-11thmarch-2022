https://github.com/joydip-git/siemens-netcore-batch2-11thmarch-2022

C#
	create your application - lots of built in functionalities
	compile your application - compiler
	quality checking - FxCop, Sonar qube etc. tools
	test your application	- unit test tool support
	deploy your application - tools	
	run your application -

Framework => provides support for development (creation, compilation, testing, deployment and running) of your application 

.NET Framework => 2002 (1.0) [Legacy Framework]
Languages: C#.NET, VB.NET, F#.NET, J#.NET (34 languages)
IDE (Integrated Development Environment) - Visual Studio

Year			Framework Version		C#					VS
----------------------------------------------------
2002					1.0						1.0				2002
2003					1.1						1.2				2003
2005					2.0						2.0				2005
2007					3.0						3.0				-----
2008					3.5						3.5				2008
2010					4.0						4.0				2010
2012/13				4.5.1/4.5.2			5.0				2012/13
2015					4.6						6.0				2015
2017					4.7						7.0				2017
2019					4.8						8.0				2019

.NET Framework will no longer be updated - MS official statement

ASP.NET framework- create web application

.NET Core


Year			.NET Core Version		C#					VS
----------------------------------------------
2016					1.0						6.0				2015
2017					1.1						7.0				2017
						3.1
...............................................
.NET (Core) 5.0, 6.0, 7.0 and 8.0 => Nov 2020
CLI (Command Line Interface) tool - dotnet

Node JS (Ryan Dahl)
Angular, React JS, ......


characterestics of .NET:
Cross-platform, 
open source
easily deployable [through docker, K8s etc. (cloud-ready app)]
modular and smaller

components of .NET Framework (legacy):
a. Library: Base class or framework class library (BCL/FCL) (such as mscorlib.dll contains definition of Console class and its methods)
b. Runtime: Common Language Runtime (CLR) - used to run any application
c. Web framework - 
	ASP.NET (framework to create different web/server application) - Active Server pages
d. Data Access Technology-
	i. ADO.NET - ActiveX Data Object .NET (technology/framework to interact with any data source) and 
	ii. EF (Entity Framework) - provides OR/M (Object relational/Mapping) for interaction with any data source

all libraries required for .NET Framework application are installed in the machine when the .NET Framework SDK itself is installed
But in the later versions of the .NET framework, Microsoft placed lots of DLLs in the NuGet


components of .NET:
a. .NET Library (such as System.Console.dll contains definition of Console class and its methods)

b. .NET Runtime (used only for console applications)
	i. .NET Desktop runtime (running all non-web/windows desktop applications)
	ii. ASP.NET Core Runtime (running ONLY ASP.NET Core web applications - web page, web api etc.)
** - if you install .NET SDK, then all runtimes will be installed in your machine. otherwise if you install either of the ASP.NET Core or .NET Desktop runtime, by default .NET runtime will also be installed in your machine

c. web framework - ASP.NET Core (framework to create different web/server application)
d. Data Access Technology-
	i. ADO.NET - ActiveX Data Object .NET (technology/framework to interact with any data source) and 
	ii. EF Core(Entity Framework Core) - provides OR/M (Object relational/Mapping) for interaction with any data source

stand-alone/executable applications: which has Main method (from where the execution of an application begins)
reusable/library applications: which has no Main method and hence can't be run directly. these type of applications can be used from other reusable/library and executable applications


.NET Framework libraries had many built-in facilities were part of one large .DLL file
.NET core libraries had small size .DLL files containing hardly few built-in facilities in each library file

design, console => mscorlib.dll
console => System.Console.dll
design => System.Design.dll

.NET libraries are majorly present in the following path:
C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\8.0.2\ref\net8.0
these are frequently used by any .NET application and hence are present in the system when .NET is installed in your system
But majority other libraries are not installed in the machine. they are present in NuGet or github. If you want, you can add reference to those packages in your application.


dotnet tool, ef tool etc are extra tools which were not part of the legacy .NET Framework, but has been introduced in .NET (Core)

dotnet tool commands (popular)
>dotnet new --list (list of type of apps that you can create)
>dotnet new (to create new application)
>dotnet restore (to restore all dependencies of an application)
>dotnet build (to compile)
>dotnet run (to run)
>dotnet --list-sdks (to see the list of .NET SDKs installed)
>dotnet add reference ( to add reference to a package from your app)
...................



